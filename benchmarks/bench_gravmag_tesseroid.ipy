# Benchmark the performance of tesseroid
# Compare the fatiando implementation with Tesseroids
# (http://leouieda.com/tesseroids/)
import sys
import numpy as np
from numpy.testing import assert_array_almost_equal
from fatiando import gridder
from fatiando.gravmag import tesseroid
from fatiando.mesher import Tesseroid, TesseroidMesh
from fatiando.vis import mpl

def timegz():
    ! tessgz model.tmp -t$tesseroid.RATIO_G < grid.tmp > out.tmp

def timegzz():
    ! tessgzz model.tmp -t$tesseroid.RATIO_GG < grid.tmp > out.tmp

def run_n_time(model, lon, lat, height):
    # Create a model file and a grid file for Tesseroids
    modfile = 'model.tmp'
    with open(modfile, 'w') as f:
        for t in model:
            f.write('%g %g %g %g %g %g %g\n'
                    % (t.w, t.e, t.s, t.n, t.top, t.bottom, t.props['density']))
    gridfile = 'grid.tmp'
    np.savetxt(gridfile, np.transpose([lon, lat, height]), fmt='%g')

    lines = ! wc -l model.tmp
    print "lines", lines[0]
    ! head model.tmp
    lines = ! wc -l grid.tmp
    print "lines", lines[0]
    ! head grid.tmp

    # Time the execution
    #print "Gz"
    #print "============================="
    #print "Tesseroids:"
    #%timeit timegz()
    #print "fatiando.tesseroid:"
    #%timeit tesseroid.gz(lon, lat, height, model)

    #ctess = np.loadtxt('out.tmp', unpack=True, usecols=[-1])
    #pytess = tesseroid.gz(lon, lat, height, model)
    #diff = np.abs(ctess - pytess)/np.abs(ctess).max()
    #assert_array_almost_equal(diff, np.zeros_like(lon), 2, 'Max diff: %.15g'
                              #% (np.abs(ctess - pytess).max()))

    print "Gzz"
    print "============================="
    print "Tesseroids:"
    %timeit timegzz()
    print "fatiando.tesseroid:"
    %timeit tesseroid.gzz(lon, lat, height, model)

    ctess = np.loadtxt('out.tmp', unpack=True, usecols=[-1])
    pytess = tesseroid.gzz(lon, lat, height, model)
    diff = np.abs(ctess - pytess)/np.abs(ctess).max()
    assert_array_almost_equal(diff, np.zeros_like(lon), 2, 'Max diff: %.15g'
                              % (np.abs(ctess - pytess).max()))

    ! rm grid.tmp model.tmp out.tmp

# Make a model with few tesseroids to run fast
model = TesseroidMesh((100, 110, -5, 5, 0, -10000), (1, 5, 5))
model.addprop('density', 2700*np.ones(model.size))
area = [101, 109, -4, 4]
shape = [25, 25]
lon, lat, height = gridder.regular(area, shape, z=10000)

if len(sys.argv) > 1 and sys.argv[1] == 'profile':
    print "Profiling code:"
    %prun tesseroid.gzz(lon, lat, height, model)
    #from line_profiler import LineProfiler
    #lp = LineProfiler(tesseroid.gzz)
    #lp.runcall(tesseroid.gzz, lon, lat, height, model)
    #lp.print_stats()
    #lp = LineProfiler(tesseroid._with_optimal_division)
    #lp.runcall(tesseroid.gzz, lon, lat, height, model)
    #lp.print_stats()
else:
    run_n_time(model, lon, lat, height)

    print "\nLARGER MODEL"
    model = TesseroidMesh((100, 110, -5, 5, 0, -10000), (1, 10, 10))
    model.addprop('density', 2700*np.ones(model.size))
    area = [101, 109, -4, 4]
    shape = [50, 50]
    lon, lat, height = gridder.regular(area, shape, z=10000)
    run_n_time(model, lon, lat, height)

